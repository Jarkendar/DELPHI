unit NewtonMethod;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, Menus, ComCtrls, StdCtrls, Grids, Clipbrd, IntervalArithmetic32and64;

type fx = function (x : Extended) : Extended; far;

function Newton(var x : Extended; f : fx; df : fx;  mit : Integer; var eps : Extended; var fatx : Extended; var it : Integer; var st : Integer) : Extended;

implementation

function Newton(var x : Extended; f : fx; df : fx;  mit : Integer; var eps : Extended; var fatx : Extended; var it : Integer; var st : Integer) : Extended;
var
  epstmp : Extended;
  mark : Boolean;
  xit : Extended;  //x po i-tej iteracji
  funkcja : Extended;
  pochodna : Extended;
begin
    mark := true;
   it := 0;
   st := 0;
//   xit := x+1;
   funkcja := 0;
   pochodna := 0;

   showMessage('x='+FloatToStr(x)+';it='+IntToStr(it)+';eps='+FloatToStr(eps)+';fatx='+FloatToStr(fatx)+';st='+IntToStr(st));

   if mit < 1 then   //mit jest za ma³y
    begin
      st := 1;
      fatx := f(x);
      it := 0;
      eps := 0;
      mark := false;
      showMessage('x='+FloatToStr(x)+';it='+IntToStr(it)+';eps='+FloatToStr(eps)+';fatx='+FloatToStr(fatx)+';st='+IntToStr(st));
      Result := x;
    end;


   while((it < mit) and (abs(xit-x)>eps)) do
    begin
      //program
      if it <> 0 then
        begin
          x:=xit;
        end;

     //obliczenie wartoœci funkcji i pochodnej
      funkcja := f(x);
      pochodna := df(x);

      if pochodna = 0 then     //wartoœæ pochodnej dla x jest równa 0
        begin
          st := 2;
          fatx := f(x);
          eps := abs(xit-x);
          mark := false;
          showMessage('x='+FloatToStr(x)+';it='+IntToStr(it)+';eps='+FloatToStr(eps)+';fatx='+FloatToStr(fatx)+';st='+IntToStr(st));
          Result := x;
          break;
        end;

      xit := x*(funkcja/pochodna);

      fatx := abs(xit-x);
      it := it + 1;
    end;

    if ((it = mit) and (abs(xit-x)>eps)) then    //nie osi¹gniet¹ wymaganej dok³adnoœci po mit iteracjach
      begin
        st := 3;
        fatx := f(x);
        eps := abs(xit-x);
        mark := false;
        showMessage('x='+FloatToStr(xit)+';it='+IntToStr(it)+';eps='+FloatToStr(eps)+';fatx='+FloatToStr(fatx)+';st='+IntToStr(st));
        Result := xit;
        showMessage('Koniec');
      end;

    if mark then
      begin
        fatx := f(x);
        eps := abs(xit-x);
        showMessage('x='+FloatToStr(xit)+';it='+IntToStr(it)+';eps='+FloatToStr(eps)+';fatx='+FloatToStr(fatx)+';st='+IntToStr(st));
        Result := xit;
      end;
end;

end.
